//
// Copyright (c) ZeroC, Inc. All rights reserved.
//
//
// Ice version 3.7.10
//
// <auto-generated>
//
// Generated from file `CentroVotacion.ice'
//
// Warning: do not edit this file.
//
// </auto-generated>
//

package Votacion;

public interface AlmacenamientoVotos extends com.zeroc.Ice.Object
{
    void registrarVotoRecibido(String votoId, String candidatoId, String estacionOrigen, EstadoVoto estado, com.zeroc.Ice.Current current)
        throws ErrorPersistenciaException;

    void marcarVotoProcesado(String votoId, com.zeroc.Ice.Current current)
        throws ErrorPersistenciaException;

    boolean hayVotosPendientes(com.zeroc.Ice.Current current)
        throws ErrorPersistenciaException;

    Voto obtenerVotoPendiente(String votoId, com.zeroc.Ice.Current current)
        throws ErrorPersistenciaException;

    String obtenerIdsVotosPendientes(com.zeroc.Ice.Current current)
        throws ErrorPersistenciaException;

    /** @hidden */
    static final String[] _iceIds =
    {
        "::Ice::Object",
        "::Votacion::AlmacenamientoVotos"
    };

    @Override
    default String[] ice_ids(com.zeroc.Ice.Current current)
    {
        return _iceIds;
    }

    @Override
    default String ice_id(com.zeroc.Ice.Current current)
    {
        return ice_staticId();
    }

    static String ice_staticId()
    {
        return "::Votacion::AlmacenamientoVotos";
    }

    /**
     * @hidden
     * @param obj -
     * @param inS -
     * @param current -
     * @return -
     * @throws com.zeroc.Ice.UserException -
    **/
    static java.util.concurrent.CompletionStage<com.zeroc.Ice.OutputStream> _iceD_registrarVotoRecibido(AlmacenamientoVotos obj, final com.zeroc.IceInternal.Incoming inS, com.zeroc.Ice.Current current)
        throws com.zeroc.Ice.UserException
    {
        com.zeroc.Ice.Object._iceCheckMode(null, current.mode);
        com.zeroc.Ice.InputStream istr = inS.startReadParams();
        String iceP_votoId;
        String iceP_candidatoId;
        String iceP_estacionOrigen;
        EstadoVoto iceP_estado;
        iceP_votoId = istr.readString();
        iceP_candidatoId = istr.readString();
        iceP_estacionOrigen = istr.readString();
        iceP_estado = EstadoVoto.ice_read(istr);
        inS.endReadParams();
        obj.registrarVotoRecibido(iceP_votoId, iceP_candidatoId, iceP_estacionOrigen, iceP_estado, current);
        return inS.setResult(inS.writeEmptyParams());
    }

    /**
     * @hidden
     * @param obj -
     * @param inS -
     * @param current -
     * @return -
     * @throws com.zeroc.Ice.UserException -
    **/
    static java.util.concurrent.CompletionStage<com.zeroc.Ice.OutputStream> _iceD_marcarVotoProcesado(AlmacenamientoVotos obj, final com.zeroc.IceInternal.Incoming inS, com.zeroc.Ice.Current current)
        throws com.zeroc.Ice.UserException
    {
        com.zeroc.Ice.Object._iceCheckMode(null, current.mode);
        com.zeroc.Ice.InputStream istr = inS.startReadParams();
        String iceP_votoId;
        iceP_votoId = istr.readString();
        inS.endReadParams();
        obj.marcarVotoProcesado(iceP_votoId, current);
        return inS.setResult(inS.writeEmptyParams());
    }

    /**
     * @hidden
     * @param obj -
     * @param inS -
     * @param current -
     * @return -
     * @throws com.zeroc.Ice.UserException -
    **/
    static java.util.concurrent.CompletionStage<com.zeroc.Ice.OutputStream> _iceD_hayVotosPendientes(AlmacenamientoVotos obj, final com.zeroc.IceInternal.Incoming inS, com.zeroc.Ice.Current current)
        throws com.zeroc.Ice.UserException
    {
        com.zeroc.Ice.Object._iceCheckMode(null, current.mode);
        inS.readEmptyParams();
        boolean ret = obj.hayVotosPendientes(current);
        com.zeroc.Ice.OutputStream ostr = inS.startWriteParams();
        ostr.writeBool(ret);
        inS.endWriteParams(ostr);
        return inS.setResult(ostr);
    }

    /**
     * @hidden
     * @param obj -
     * @param inS -
     * @param current -
     * @return -
     * @throws com.zeroc.Ice.UserException -
    **/
    static java.util.concurrent.CompletionStage<com.zeroc.Ice.OutputStream> _iceD_obtenerVotoPendiente(AlmacenamientoVotos obj, final com.zeroc.IceInternal.Incoming inS, com.zeroc.Ice.Current current)
        throws com.zeroc.Ice.UserException
    {
        com.zeroc.Ice.Object._iceCheckMode(null, current.mode);
        com.zeroc.Ice.InputStream istr = inS.startReadParams();
        String iceP_votoId;
        iceP_votoId = istr.readString();
        inS.endReadParams();
        Voto ret = obj.obtenerVotoPendiente(iceP_votoId, current);
        com.zeroc.Ice.OutputStream ostr = inS.startWriteParams();
        Voto.ice_write(ostr, ret);
        inS.endWriteParams(ostr);
        return inS.setResult(ostr);
    }

    /**
     * @hidden
     * @param obj -
     * @param inS -
     * @param current -
     * @return -
     * @throws com.zeroc.Ice.UserException -
    **/
    static java.util.concurrent.CompletionStage<com.zeroc.Ice.OutputStream> _iceD_obtenerIdsVotosPendientes(AlmacenamientoVotos obj, final com.zeroc.IceInternal.Incoming inS, com.zeroc.Ice.Current current)
        throws com.zeroc.Ice.UserException
    {
        com.zeroc.Ice.Object._iceCheckMode(null, current.mode);
        inS.readEmptyParams();
        String ret = obj.obtenerIdsVotosPendientes(current);
        com.zeroc.Ice.OutputStream ostr = inS.startWriteParams();
        ostr.writeString(ret);
        inS.endWriteParams(ostr);
        return inS.setResult(ostr);
    }

    /** @hidden */
    final static String[] _iceOps =
    {
        "hayVotosPendientes",
        "ice_id",
        "ice_ids",
        "ice_isA",
        "ice_ping",
        "marcarVotoProcesado",
        "obtenerIdsVotosPendientes",
        "obtenerVotoPendiente",
        "registrarVotoRecibido"
    };

    /** @hidden */
    @Override
    default java.util.concurrent.CompletionStage<com.zeroc.Ice.OutputStream> _iceDispatch(com.zeroc.IceInternal.Incoming in, com.zeroc.Ice.Current current)
        throws com.zeroc.Ice.UserException
    {
        int pos = java.util.Arrays.binarySearch(_iceOps, current.operation);
        if(pos < 0)
        {
            throw new com.zeroc.Ice.OperationNotExistException(current.id, current.facet, current.operation);
        }

        switch(pos)
        {
            case 0:
            {
                return _iceD_hayVotosPendientes(this, in, current);
            }
            case 1:
            {
                return com.zeroc.Ice.Object._iceD_ice_id(this, in, current);
            }
            case 2:
            {
                return com.zeroc.Ice.Object._iceD_ice_ids(this, in, current);
            }
            case 3:
            {
                return com.zeroc.Ice.Object._iceD_ice_isA(this, in, current);
            }
            case 4:
            {
                return com.zeroc.Ice.Object._iceD_ice_ping(this, in, current);
            }
            case 5:
            {
                return _iceD_marcarVotoProcesado(this, in, current);
            }
            case 6:
            {
                return _iceD_obtenerIdsVotosPendientes(this, in, current);
            }
            case 7:
            {
                return _iceD_obtenerVotoPendiente(this, in, current);
            }
            case 8:
            {
                return _iceD_registrarVotoRecibido(this, in, current);
            }
        }

        assert(false);
        throw new com.zeroc.Ice.OperationNotExistException(current.id, current.facet, current.operation);
    }
}
